{"remainingRequest":"D:\\project\\study\\tesseract.js-vue-offline\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\study\\tesseract.js-vue-offline\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\study\\tesseract.js-vue-offline\\src\\App.vue","mtime":1682407654233},{"path":"D:\\project\\study\\tesseract.js-vue-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\study\\tesseract.js-vue-offline\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\project\\study\\tesseract.js-vue-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\study\\tesseract.js-vue-offline\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport { createWorker, PSM, OEM } from \"tesseract.js\";\nconst path = require(\"path\");\nconst worker = createWorker({\n  workerPath: \"/tesseract/tesseract.js/dist/worker.min.js\",\n  corePath: \"/tesseract/tesseract.js-core/tesseract-core.wasm.js\",\n  langPath: \"/tesseract/tesseract-lang\", \n  logger: (m) => console.log(m),\n});\n\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      haveInit: false,\n      text: \"\",\n    };\n  },\n  mounted(){\n    this.showImg();\n  },\n  methods: {\n    async recognize() {\n      const fileInput = document.querySelector(\"#file-input\");\n      if (!this.haveInit) {\n        await worker.load();\n        await worker.loadLanguage(\"chi_sim\");\n        await worker.initialize(\"chi_sim\", OEM.LSTM_ONLY);\n        await worker.setParameters({\n          tessedit_pageseg_mode: PSM.SINGLE_BLOCK,\n        });\n        this.haveInit = true;\n      }\n\n      const img = document.getElementById(\"canvas\");\n      const {\n        data: { text },\n      } = await worker.recognize(img);\n      this.text = text;\n      console.timeEnd(\"time:\");\n    },\n    showImg() {\n      const fileInput = document.querySelector(\"#file-input\");\n      fileInput.addEventListener(\"change\", async () => {\n        const file = fileInput.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = async () => {\n            const img = new Image();\n            img.src = reader.result;\n            img.onload = () => {\n              canvas.width = img.width;\n              canvas.height = img.height;\n              const ctx = canvas.getContext(\"2d\");\n              ctx.drawImage(img, 0, 0);\n              this.recognize();\n            };\n          };\n        }\n      });\n    },\n  },\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <input type=\"file\" id=\"file-input\" accept=\"image/*\" />\n    <div><canvas id=\"canvas\"></canvas></div>\n    <div style=\"margin-top:70px;\">{{ text }}</div>\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport { createWorker, PSM, OEM } from \"tesseract.js\";\nconst path = require(\"path\");\nconst worker = createWorker({\n  workerPath: \"/tesseract/tesseract.js/dist/worker.min.js\",\n  corePath: \"/tesseract/tesseract.js-core/tesseract-core.wasm.js\",\n  langPath: \"/tesseract/tesseract-lang\", \n  logger: (m) => console.log(m),\n});\n\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      haveInit: false,\n      text: \"\",\n    };\n  },\n  mounted(){\n    this.showImg();\n  },\n  methods: {\n    async recognize() {\n      const fileInput = document.querySelector(\"#file-input\");\n      if (!this.haveInit) {\n        await worker.load();\n        await worker.loadLanguage(\"chi_sim\");\n        await worker.initialize(\"chi_sim\", OEM.LSTM_ONLY);\n        await worker.setParameters({\n          tessedit_pageseg_mode: PSM.SINGLE_BLOCK,\n        });\n        this.haveInit = true;\n      }\n\n      const img = document.getElementById(\"canvas\");\n      const {\n        data: { text },\n      } = await worker.recognize(img);\n      this.text = text;\n      console.timeEnd(\"time:\");\n    },\n    showImg() {\n      const fileInput = document.querySelector(\"#file-input\");\n      fileInput.addEventListener(\"change\", async () => {\n        const file = fileInput.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = async () => {\n            const img = new Image();\n            img.src = reader.result;\n            img.onload = () => {\n              canvas.width = img.width;\n              canvas.height = img.height;\n              const ctx = canvas.getContext(\"2d\");\n              ctx.drawImage(img, 0, 0);\n              this.recognize();\n            };\n          };\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}]}